trigger:
  branches:
    include:
      - main
  paths:
    include:
      - terraform/*

variables:
  # Define variables or reference a variable group
  - group: terraform-secrets  
  - name: SUBSCRIPTION_ID
    value: '955faad9-ebe9-4a85-9974-acae429ae877'
  - name: TF_BACKEND_RG
    value: 'dev-openai-rg'
  - name: TF_BACKEND_SA
    value: 'devtfstatezved9d'
  - name: TF_BACKEND_CONTAINER
    value: 'tfstate'

stages:
  - stage: Terraform_Deploy
    displayName: 'Deploy Terraform Infrastructure'
    jobs:
      - job: Terraform_Apply
        displayName: 'Run Terraform Workflow'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Step 1: Install Terraform manually
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'service-con'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install unzip dependency
                sudo apt-get update && sudo apt-get install -y unzip
                # Download Terraform 1.5.7
                curl -fsSL https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip -o terraform.zip
                unzip terraform.zip
                sudo mv terraform /usr/local/bin/
                # Verify installation
                terraform --version
            displayName: 'Install Terraform'
          
          # Step 2: Initialize Terraform with Azure backend
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'service-con'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: 'terraform'
              inlineScript: |
                # Set environment variables for Terraform
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
                
                # Initialize Terraform with backend configuration
                terraform init \
                  -backend-config="resource_group_name=$(TF_BACKEND_RG)" \
                  -backend-config="storage_account_name=$(TF_BACKEND_SA)" \
                  -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \
                  -backend-config="key=terraform.tfstate"
            displayName: 'Terraform Init'
          
          # Step 3: Generate Terraform plan
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'service-con'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: 'terraform'
              inlineScript: |
                # Set environment variables for Terraform
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
                
                # Create a Terraform plan
                terraform plan -out=tfplan
                
                # Optionally, save the plan as an artifact
                echo "##vso[task.uploadsummary]terraform-plan.txt"
                terraform show -no-color tfplan > terraform-plan.txt
            displayName: 'Terraform Plan'
          
          # Step 4: Apply Terraform plan (only on main branch)
          - task: AzureCLI@2
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              azureSubscription: 'service-con'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              workingDirectory: 'terraform'
              inlineScript: |
                # Set environment variables for Terraform
                export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
                export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
                export ARM_TENANT_ID=$(ARM_TENANT_ID)
                export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
                
                # Apply the Terraform plan
                terraform apply -auto-approve tfplan
            displayName: 'Terraform Apply'
